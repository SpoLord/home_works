// TASK-01

// –ù–∞–ø–∏—Å–∞—Ç–∏ —Ñ—É–Ω—Ü—ñ—é, —è–∫–∞ –±—É–¥–µ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ —á–∏ —î –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤—ñ –Ω–∞ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ–π –ø–æ–∑–∏—Ü—ñ—ó.
// Arguments:
// - _word_ - —Å–ª–æ–≤–æ, –Ω–∞ —è–∫–æ–º—É —Ç—Ä–µ–±–∞ –±—É–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –±—É–∫–≤–∏
// - _index_ - –ø–æ–∑–∏—Ü—ñ—è —Å–∏–º–≤–æ–ª—É –Ω–∞ —è–∫–æ–º—É —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∑–¥–æ–≥–∞–¥–∫—É
// - _char_ - –±—É–∫–≤–∞, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —è–∫–æ—ó —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –≤ —Å–ª–æ–≤—ñ
// Return value
// true –∞–±–æ false, –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ —î –±—É–∫–≤–∞ –≤ —Å–ª–æ–≤—ñ —á–∏ –Ω—ñ.

function indexMatch() {
  const word = prompt("Give me a word")
  const index = parseInt(prompt("Give me an expected index"))
  const char = prompt("Give me a char")

  let value = ""

  word.indexOf(char)
  if (word.indexOf(char) === index) {
    value = "true"
  } else {
    value = "false"
  }

  alert(value)
}

//  TASK-02 done

// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏–º–µ –¥–æ–≤–∂–∏–Ω—É —Å–≤–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É.
//  Arguments:
// - str - —Å—Ç—Ä–æ–∫–∞, –¥–æ–≤–∂–∏–Ω—É —è–∫–æ—ó –º–∞—î –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—è
// - expectedLength - –æ—á—ñ–∫—É–≤–∞–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
// Return value
// true –∞–±–æ false

function isLenghtOK() {
  const str = prompt("Give me a string")
  const expectedLength = parseInt(prompt("Give me an expected length"))

  let value = ""

  if (expectedLength === str.length) {
    value = "true"
  } else {
    value = "false"
  }

  alert(value)
}

/**
 * –ó–∞–¥–∞–Ω–∏–µ 3.
 *
 * –§—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.
 */

function lenghtCounter() {
  let strs = []
  //–º–µ–Ω—ñ –Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è, —è–∫ –ø—Ä–∞—Ü—é—î —Ü–µ–π –≤–∞–π–ª, –∞–ª–µ —è —ó–±–∞–≤ –ø—Ä–∏–¥—É–º—É–≤–∞—Ç–∏ –Ω–æ—Ä–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è.
  while (confirm("Do you want to add an arg?")) {
    strs.push(prompt("add an arg"))
  }
  let value = strs.length
  console.log(strs)
  console.log(value)
}

/**
 * –ó–∞–¥–∞–Ω–∏–µ 4.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-—Å—á—ë—Ç—á–∏–∫ count.
 *
 * –§—É–Ω–∫—Ü–∏—è –æ–±–ª–∞–¥–∞–µ—Ç –¥–≤—É–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
 * - –ü–µ—Ä–≤—ã–π ‚Äî —á–∏—Å–ª–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å —Å—á—ë—Ç;
 * - –í—Ç–æ—Ä–æ–π ‚Äî —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å —Å—á—ë—Ç.
 *
 * –ï—Å–ª–∏ —á–∏—Å–ª–æ, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å—á—ë—Ç –±–æ–ª—å—à–µ, —á–µ–º —á–∏—Å–ª–æ,
 * –∫–æ—Ç–æ—Ä—ã–º –æ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 * ¬´‚õîÔ∏è –û—à–∏–±–∫–∞! –°—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.¬ª
 *
 * –ï—Å–ª–∏ –æ–±–∞ —ç—Ç–∏—Ö —á–∏—Å–ª–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 * ¬´‚õîÔ∏è –û—à–∏–±–∫–∞! –ù–µ—á–µ–≥–æ —Å—á–∏—Ç–∞—Ç—å.¬ª
 *
 * –í –Ω–∞—á–∞–ª–µ —Å—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 * ¬´üèÅ –û—Ç—Å—á—ë—Ç –Ω–∞—á–∞—Ç.¬ª.
 *
 * –ö–∞–∂–¥—ã–π ¬´—à–∞–≥¬ª —Å—á—ë—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å.
 * –ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ¬´—à–∞–≥–∞¬ª –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:
 * ¬´‚úÖ –û—Ç—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.¬ª.
 *
 */

// –≤–≤–æ–¥ –¥–≤—É—Ö —á–∏—Å–µ–ª: —Å—Ç–∞—Ä—Ç–æ–≤–µ, –∫—ñ–Ω—Ü–µ–≤–µ > –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —á–∏—Å–µ–ª —á–µ—Ä–µ–∑ if –±—ñ–ª—å—à–µ/–º–µ–Ω—à–µ > —è–∫—â–æ –≤—Å–µ –æ–∫, –≤–∏–≤–æ–¥–∏—Ç–∏ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ while ++
function countChar() {
  let startChar = prompt("Giwe me a start char")
  let finishChar = prompt("Giwe me a finish char")

  if (startChar > finishChar) {
    alert("‚õîÔ∏è –û—à–∏–±–∫–∞! –°—á—ë—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
  } else if (startChar === finishChar) {
    alert("–ù–µ—á–µ–≥–æ —Å—á–∏—Ç–∞—Ç—å.")
  } else {
    alert("üèÅ –û—Ç—Å—á—ë—Ç –Ω–∞—á–∞—Ç.")
    while (startChar <= finishChar) {
      console.log(startChar)
      startChar++
    }
    alert("‚úÖ –û—Ç—Å—á—ë—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.")
  }
}

/**
 * –ó–∞–¥–∞–Ω–∏–µ 5.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é-—Å—á—ë—Ç—á–∏–∫ countAdvanced.
 *
 * –§—É–Ω–∫—Ü–∏—é-—Å—á—ë—Ç—á–∏–∫ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º:
 * - –î–æ–±–∞–≤–∏—Ç—å –µ–π —Ç—Ä–µ—Ç–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∏ –≤—ã–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –∫—Ä–∞—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ —ç—Ç–æ–≥–æ
 *  –ø–∞—Ä–∞–º–µ—Ç—Ä–∞;
 * - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É (throw new Error), –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ —Å —Ç—Ä–µ–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏;
 * - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª—é–±–æ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º.
 */

/**
 * –ó–∞–¥–∞–Ω–∏–µ 6.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-—Å—É–º–º–∞—Ç–æ—Ä –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 *
 * –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
 * –û–¥–Ω–∞–∫–æ –∫–∞–∂–¥—ã–π –∏–∑ –Ω–∏—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.
 *
 * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏:
 * - –•–æ—Ç—å –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º (–≤ –æ—à–∏–±–∫–µ —É–∫–∞–∑–∞—Ç—å –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–∞);
 * - –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –º–µ–Ω–µ–µ, —á–µ–º —Å –¥–≤—É–º—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏.
 *
 * –£—Å–ª–æ–≤–∏—è:
 * - –û–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ¬´...¬ª –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
 */

/**
 * –ó–∞–¥–∞–Ω–∏–µ 7.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é-—Å—á—ë—Ç—á–∏–∫ increment.
 *
 * –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0.
 * –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —á–∏—Å–ª–æ, –Ω–∞ 1 –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.
 *
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
 * - –ù–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Ä–µ—à–µ–Ω–∏—è.
 */

/**
 * –ó–∞–¥–∞–Ω–∏–µ 8.
 *
 * –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é createIncrement, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é.
 *
 * –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ —ç—Ç–æ–π –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 0.
 * –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ —ç—Ç–æ–π –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —á–∏—Å–ª–æ, –Ω–∞ 1 –±–æ–ª—å—à–µ, —á–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.
 *
 * –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ createIncrement –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –Ω–æ–≤—É—é ¬´–¥–æ—á–µ—Ä–Ω—é—é¬ª —Ñ—É–Ω–∫—Ü–∏—é-—Å—á—ë—Ç—á–∏–∫.
 * –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –¥–æ—á–µ—Ä–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç—Å—á—ë—Ç —Å 0.
 *
 * –£—Å–ª–æ–≤–∏—è:
 * - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–º—ã–∫–∞–Ω–∏—è;
 * - –û–±—ä—è–≤–ª—è—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ –º–æ–¥—É–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–æ.
 *
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å:
 * - –ù–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Ä–µ—à–µ–Ω–∏—è.
 */

// while (confirm("Do you want to do something?")) {
//   switch (prompt("1 for index; 2 for length; 3 for Hangman")) {
//     case "1":
//       indexMatch()
//       break
//     case "2":
//       isLenghtOK()
//       break
//     case "3":
//       lenghtCounter()
//       break
//     case "4":
//       break
//     case "5":
//       break
//     case "6":
//       break
//     case "7":
//       break
//     case "8":
//       break
//   }
// }
